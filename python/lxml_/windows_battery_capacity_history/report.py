# accepts Windows battery HTML report as generated by:
#
#   ```
#   powercfg /batteryreport
#   ```
#
# and generates a plot of the "Battery capacity history" table over time

import sys
assert sys.version_info > (3, 12), "Python 3.12+ required"

from itertools import batched

import pandas as pd
import lxml.html
from matplotlib import pyplot as plt


DAILY = "D"
PLOT_FN = "out.png"

TRANSLATION = str.maketrans({
    "\r": "",
    "\n": "",
    ",": "",
})

if __name__ == "__main__":
    if not len(sys.argv) > 1:
        raise SystemExit(f"Usage: {sys.argv[0]} battery-report.html")

    doc = lxml.html.parse(sys.argv[1])

    # Get the first <table> sibling of the first <h2> that contains "capacity"
    capacity_table = doc.xpath('//h2[contains(., "capacity")]/following-sibling::table')[0]

    # the first three <td> are the headers in the <thead>  (I'm not sure why `.//tbody/td` doesn't work here, but it doesn't)
    capacities = capacity_table.xpath(".//td")[3:]

    # NOTE: it *feels* like there is a way to declare the DataFrame ahead of time here and avoid using these lists, but
    # I couldn't find it after a few minutes of fussing around, so I stopped bothering
    dates = []
    caps = []

    for row in batched(capacities, n=3):
        assert len(row) == 3, f"Unexpected row: {row!r}"

        dt, cap_actual_txt, cap_design_txt = [cell.text.strip().translate(TRANSLATION) for cell in row]
        start, sep, stop = [part.strip() for part in dt.partition(" - ")]

        cap_actual = int(cap_actual_txt.replace("mWh", ""))
        cap_design = int(cap_design_txt.replace("mWh", ""))
        cap_ratio = cap_actual/cap_design

        vals = [(cap_actual, cap_design, cap_ratio)]
        if stop:
            idx = pd.date_range(start, stop, freq=DAILY).to_list()
            vals *= len(idx)
        else:
            idx = [start]

        dates.extend(idx)
        caps.extend(vals)

    df = pd.DataFrame(
        columns=["battery capacity (actual, full charge)", "battery capacity (design)", "ratio"],
        data=caps,
        index=pd.DatetimeIndex(dates),
    )

    df.plot(
        y=[0, 1],
        markevery=3,
        markersize=4,
        figsize=(16, 5),
        style=['bx', 'r+'],
        ylabel="Capacity (mWh)",
    )
    plt.savefig(PLOT_FN)
    print(f"Battery history written to {PLOT_FN!r}")
